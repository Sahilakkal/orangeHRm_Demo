import tkinter as tk
from tkinter import messagebox
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import Tokenizer

# Load the tokenizer
tokenizer = Tokenizer()
tokenizer.fit_on_texts([''])  # Pass empty list to avoid an error, tokenizer will not be used for prediction

# Load the trained model
model = load_model('trained_model.h5')

# Maximum length of code snippets
MAX_LENGTH = 100  # Update with the maximum length used during training

# Function to preprocess the code snippet
def preprocess_code(code):
    code_sequence = tokenizer.texts_to_sequences([code])
    code_padded = pad_sequences(code_sequence, maxlen=MAX_LENGTH, padding='post')
    return code_padded

# Function to perform prediction
def predict():
    code = code_entry.get()

    # Preprocess the new code snippet
    code_padded = preprocess_code(code)

    # Generate prediction
    prediction = model.predict(code_padded)
    predicted_class = np.argmax(prediction)

    # Show prediction result
    class_names = ['safe', 'vulnerable']  # Update with your actual class labels used during training
    messagebox.showinfo("Prediction Result", f"The code snippet is classified as: {class_names[predicted_class]}")

# Create the Tkinter GUI window
window = tk.Tk()
window.title("Code Classification")
window.geometry("400x200")

# Create the code entry field
code_label = tk.Label(window, text="Enter code snippet:")
code_label.pack()
code_entry = tk.Entry(window)
code_entry.pack()

# Create the predict button
predict_button = tk.Button(window, text="Predict", command=predict)
predict_button.pack()

# Run the Tkinter event loop
window.mainloop()
