import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Define the dataset
data = {
    'Domain': ['Enterprise Software', 'Enterprise Software', 'Enterprise Software', 'Enterprise Software', 'Enterprise Software', 'Enterprise Software', 'Enterprise Software', 'Enterprise Software', 'Enterprise Software'],
    'Requirements': ['User Management', 'User Management', 'User Management', 'Financial Management', 'Financial Management', 'Financial Management', 'Inventory Management', 'Inventory Management', 'Sales and Order Management'],
    'User Story': [
        'As an administrator, I want to be able to create new user accounts, assign roles, and manage permissions easily',
        'As a user, I want to be able to reset my password securely',
        'As a manager, I want to view user activity logs for auditing purposes',
        'As a finance manager, I want to generate financial reports, such as balance sheets and income statements, for accurate financial analysis and decision-making.',
        'As an accountant, I want to record and reconcile financial transactions efficiently.',
        'As a CFO, I want to monitor budget utilization and track key financial metrics.',
        'As a warehouse manager, I want to track inventory levels in real-time, receive alerts for low stock, and generate purchase orders automatically when stock reaches a reorder point.',
        'As a procurement officer, I want to maintain a centralized product catalog with SKU information and pricing details.',
        'As a sales representative, I want to create and manage customer orders efficiently, track their status, and generate invoices for timely payment processing'
    ]
}

# Create a DataFrame from the dataset
df = pd.DataFrame(data)

# Preprocess the dataset
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['Domain'] + ' ' + df['Requirements'])
y = df['User Story']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)
