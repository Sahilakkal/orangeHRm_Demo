import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Define the dataset
data = {
    'Domain': ['Enterprise Software', 'Enterprise Software', 'Enterprise Software',
               'Enterprise Software', 'Enterprise Software', 'Enterprise Software',
               'Enterprise Software', 'Enterprise Software', 'Enterprise Software'],
    'Requirements': ['User Management', 'User Management', 'User Management',
                     'Financial Management', 'Financial Management', 'Financial Management',
                     'Inventory Management', 'Inventory Management', 'Sales and Order Management'],
    'User Story': ['As an administrator, I want to be able to create new user accounts, assign roles, and manage permissions easily',
                   'As a user, I want to be able to reset my password securely',
                   'As a manager, I want to view user activity logs for auditing purposes',
                   'As a finance manager, I want to generate financial reports, such as balance sheets and income statements, for accurate financial analysis and decision-making.',
                   'As an accountant, I want to record and reconcile financial transactions efficiently.',
                   'As a CFO, I want to monitor budget utilization and track key financial metrics.',
                   'As a warehouse manager, I want to track inventory levels in real-time, receive alerts for low stock, and generate purchase orders automatically when stock reaches a reorder point.',
                   'As a procurement officer, I want to maintain a centralized product catalog with SKU information and pricing details.',
                   'As a sales representative, I want to create and manage customer orders efficiently, track their status, and generate invoices for timely payment processing']
}

# Create a DataFrame from the dataset
df = pd.DataFrame(data)

# Preprocess the dataset
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['User Story'])
y_domain = df['Domain']
y_requirement = df['Requirements']

# Split the data into train and test sets
X_train, X_test, y_domain_train, y_domain_test, y_requirement_train, y_requirement_test = train_test_split(
    X, y_domain, y_requirement, test_size=0.2, random_state=42)

# Train a logistic regression classifier for domain classification
domain_classifier = LogisticRegression()
domain_classifier.fit(X_train, y_domain_train)

# Train a logistic regression classifier for requirement classification
requirement_classifier = LogisticRegression()
requirement_classifier.fit(X_train, y_requirement_train)

# Evaluate the classifiers
domain_accuracy = domain_classifier.score(X_test, y_domain_test)
requirement_accuracy = requirement_classifier.score(X_test, y_requirement_test)

print(f"Domain Classifier Accuracy: {domain_accuracy}")
print(f"Requirement Classifier Accuracy: {requirement_accuracy}")
