import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Load the dataset
dataset = pd.read_csv('your_dataset.csv')

# Preprocess the dataset
tokenizer = Tokenizer()
tokenizer.fit_on_texts(dataset['User Story'])
sequences = tokenizer.texts_to_sequences(dataset['User Story'])
word_index = tokenizer.word_index
max_sequence_length = max(len(sequence) for sequence in sequences)
padded_sequences = pad_sequences(sequences, maxlen=max_sequence_length)

# Split the dataset into train and test sets
X = np.array([dataset['Requirement Label'], dataset['Domain Label']]).T
y = np.array(padded_sequences)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model
vocab_size = len(word_index) + 1
embedding_dim = 100

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim, input_length=max_sequence_length))
model.add(LSTM(128))
model.add(Dense(max_sequence_length, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)

# Save the trained model
model.save('trained_model.h5')






import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression

# Load the data from an Excel file
df = pd.read_excel('C:\\Users\\mansidhingra\\Documents\\dataset.xlsx')

print(df)

# Perform data preprocessing
df['text'] = df['empname'] + ' ' + df['skills'] + ' ' + df['jobtitle'] + ' ' + df['reviews']
df['positive_feedback'] = df['positive_feedback'].map({'Yes': 1, 'No': 0})

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['positive_feedback'], test_size=0.2, random_state=42)

# Vectorize the text data
vectorizer = CountVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)

# Train a logistic regression model
model = LogisticRegression()
model.fit(X_train_vectorized, y_train)
X_test_vectorized = vectorizer.transform(X_test)
accuracy = model.score(X_test_vectorized, y_test)
print("Model accuracy:", accuracy)
